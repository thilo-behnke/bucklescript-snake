// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as List from "./../../../node_modules/bs-platform/lib/es6/list.js";
import * as Utils from "./Utils.bs.js";
import * as Director from "./Director.bs.js";
import * as Caml_int32 from "./../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as Pervasives from "./../../../node_modules/bs-platform/lib/es6/pervasives.js";

var currentGame = /* record */[
  /* state : GOING */0,
  /* score */0,
  /* actor : record */[
    /* body */List.map((function (i) {
            return /* tuple */[
                    /* tuple */[
                      100 + Caml_int32.imul(i, 5) | 0,
                      100
                    ],
                    /* Right */1,
                    false
                  ];
          }), Utils.MyList[/* range */3](100)),
    /* direction : Right */1
  ],
  /* superSpawn : tuple */[
    performance.now(),
    undefined
  ],
  /* spawn *//* record */[
    /* pos : tuple */[
      100,
      100
    ],
    /* symbol */"*"
  ]
];

function clear_canvas(canvas) {
  var context = canvas.getContext("2d");
  var cwidth = canvas.width;
  var cheight = canvas.height;
  context.clearRect(0, 0, cwidth, cheight);
  return /* () */0;
}

function draw_actor(canvas, body) {
  var context = canvas.getContext("2d");
  return Utils.MyList[/* forEachi */2]((function (param, i) {
                var match = param[0];
                var y = match[1];
                var x = match[0];
                var match$1;
                switch (param[1]) {
                  case 0 : 
                      match$1 = /* tuple */[
                        x,
                        y + 5 | 0
                      ];
                      break;
                  case 1 : 
                      match$1 = /* tuple */[
                        x - 5 | 0,
                        y
                      ];
                      break;
                  case 2 : 
                      match$1 = /* tuple */[
                        x,
                        y - 5 | 0
                      ];
                      break;
                  case 3 : 
                      match$1 = /* tuple */[
                        x + 5 | 0,
                        y
                      ];
                      break;
                  
                }
                var match$2 = i % 3;
                var color;
                if (match$2 > 2 || match$2 < 0) {
                  color = "#ffff00";
                } else {
                  switch (match$2) {
                    case 0 : 
                        color = "#ff0066";
                        break;
                    case 1 : 
                        color = "#0066ff";
                        break;
                    case 2 : 
                        color = "#00cc00";
                        break;
                    
                  }
                }
                var lineWidth = param[2] ? 8 : 5;
                context.beginPath();
                context.strokeStyle = color;
                context.lineWidth = lineWidth;
                context.moveTo(match$1[0], match$1[1]);
                context.lineTo(x, y);
                context.stroke();
                return context.closePath();
              }), body);
}

function draw_prey(canvas, prey) {
  if (prey !== undefined) {
    var match = prey[/* pos */0];
    var y = match[1];
    var x = match[0];
    var context = canvas.getContext("2d");
    context.beginPath();
    context.lineWidth = 6;
    context.moveTo(x - 6 | 0, y);
    context.lineTo(x, y);
    context.stroke();
    return context.closePath();
  } else {
    return /* () */0;
  }
}

function draw_debug(canvas, actor, _) {
  var context = canvas.getContext("2d");
  context.strokeStyle = "#ff0066";
  context.lineWidth = 3;
  context.rect(300, 0, 150, 100);
  context.stroke();
  var body = actor[/* body */0];
  var bodLength = List.length(body);
  var actorStr = "Body Length: " + String(bodLength);
  console.log(actorStr);
  context.fillText(actorStr, 310, 10);
  return /* () */0;
}

function checkCollision(actor, prey) {
  if (prey !== undefined) {
    var direction = actor[/* direction */1];
    var match = List.hd(actor[/* body */0]);
    var match$1 = match[0];
    var y = match$1[1];
    var x = match$1[0];
    var match$2 = prey[/* pos */0];
    var preyY = match$2[1];
    var preyX = match$2[0];
    var exit = 0;
    if (direction !== 1 && direction < 3) {
      if (Pervasives.abs(x - preyX | 0) <= 3) {
        return Pervasives.abs(y - preyY | 0) < 3;
      } else {
        return false;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (Pervasives.abs(x - preyX | 0) < 3) {
        return Pervasives.abs(y - preyY | 0) <= 3;
      } else {
        return false;
      }
    }
    
  } else {
    return false;
  }
}

function gameLoop(t) {
  var match = currentGame[/* actor */2];
  var body = match[/* body */0];
  var direction = match[/* direction */1];
  var match$1 = currentGame[/* superSpawn */3];
  var spawn = currentGame[/* spawn */4];
  var match$2 = List.hd(body);
  var match$3 = match$2[0];
  var newHead_000 = Director.calcNextPos(5, /* tuple */[
        512,
        256
      ], /* tuple */[
        match$3[0],
        match$3[1]
      ], direction);
  var newHead = /* tuple */[
    newHead_000,
    direction,
    false
  ];
  currentGame[/* actor */2][/* body */0] = Director.updateBody(newHead, body);
  var match$4 = currentGame[/* actor */2];
  var body$1 = match$4[/* body */0];
  var canvas_id = "canvas";
  var match$5 = document.getElementById(canvas_id);
  var canvas = match$5 !== null ? match$5 : (console.log("cant find canvas canvas \n"), Pervasives.failwith("fail"));
  var match$6;
  if (spawn !== undefined) {
    var match$7 = checkCollision(currentGame[/* actor */2], spawn);
    if (match$7) {
      var match$8 = List.hd(body$1);
      match$6 = /* tuple */[
        undefined,
        /* :: */[
          /* tuple */[
            match$8[0],
            match$8[1],
            true
          ],
          List.tl(body$1)
        ]
      ];
    } else {
      match$6 = /* tuple */[
        spawn,
        body$1
      ];
    }
  } else {
    var match$9 = Director.spawnRandom(/* tuple */[
          12,
          500
        ], /* tuple */[
          12,
          244
        ], t | 0);
    match$6 = /* tuple */[
      /* record */[
        /* pos : tuple */[
          match$9[0],
          match$9[1]
        ],
        /* symbol */"*"
      ],
      body$1
    ];
  }
  currentGame[/* spawn */4] = match$6[0];
  currentGame[/* actor */2][/* body */0] = match$6[1];
  clear_canvas(canvas);
  draw_actor(canvas, body$1);
  draw_prey(canvas, match$1[1]);
  draw_prey(canvas, spawn);
  draw_debug(canvas, currentGame[/* actor */2], spawn);
  requestAnimationFrame(gameLoop);
  return /* () */0;
}

document.addEventListener("keydown", (function (evt) {
        var match = Director.handleKey(evt.keyCode, currentGame[/* actor */2][/* direction */1]);
        currentGame[/* actor */2][/* direction */1] = match !== undefined ? match : currentGame[/* actor */2][/* direction */1];
        return true;
      }), true);

gameLoop(performance.now());

var Utils$1 = Utils.Utils;

var MyList = Utils.MyList;

var windowHeight = 256;

var windowWidth = 512;

var memberLength = 5;

var memberWidth = 3;

export {
  Utils$1 as Utils,
  MyList ,
  windowHeight ,
  windowWidth ,
  memberLength ,
  memberWidth ,
  currentGame ,
  clear_canvas ,
  draw_actor ,
  draw_prey ,
  draw_debug ,
  checkCollision ,
  gameLoop ,
  
}
/* currentGame Not a pure module */
