// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as Curry from "./../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Js_primitive from "./../../../node_modules/bs-platform/lib/es6/js_primitive.js";

function add(a, b) {
  return a + b | 0;
}

function inc(i) {
  return i + 1 | 0;
}

function dec(i) {
  return i - 1 | 0;
}

function $$double(i) {
  return (i << 1);
}

function incDouble(i) {
  return ((i + 1 | 0) << 1);
}

function sub(a, b) {
  return a - b | 0;
}

function sum(a, b) {
  return a + b | 0;
}

var Utils = /* module */[
  /* add */add,
  /* inc */inc,
  /* dec */dec,
  /* double */$$double,
  /* incDouble */incDouble,
  /* sub */sub,
  /* sum */sum
];

function map(f, param) {
  if (param) {
    return /* :: */[
            Curry._1(f, param[0]),
            map(f, param[1])
          ];
  } else {
    return /* [] */0;
  }
}

function forEach(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      Curry._1(f, param[0]);
      _param = param[1];
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function forEachi(f, l) {
  var _i = 0;
  var _param = l;
  while(true) {
    var param = _param;
    var i = _i;
    if (param) {
      Curry._2(f, param[0], i);
      _param = param[1];
      _i = i + 1 | 0;
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function range(n) {
  var _acc = /* [] */0;
  var _i = 0;
  while(true) {
    var i = _i;
    var acc = _acc;
    var match = i < n;
    if (match) {
      _i = i + 1 | 0;
      _acc = /* :: */[
        i,
        acc
      ];
      continue ;
    } else {
      return acc;
    }
  };
}

function find_opt(pred, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var x = param[0];
      if (Curry._1(pred, x)) {
        return Js_primitive.some(x);
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return undefined;
    }
  };
}

var MyList = /* module */[
  /* map */map,
  /* forEach */forEach,
  /* forEachi */forEachi,
  /* range */range,
  /* find_opt */find_opt
];

export {
  Utils ,
  MyList ,
  
}
/* No side effect */
