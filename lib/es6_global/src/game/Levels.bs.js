// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as List from "./../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Block from "./../../../../node_modules/bs-platform/lib/es6/block.js";
import * as Utils from "./Utils.bs.js";
import * as $$String from "./../../../../node_modules/bs-platform/lib/es6/string.js";
import * as Constants from "./Constants.bs.js";
import * as Caml_int32 from "./../../../../node_modules/bs-platform/lib/es6/caml_int32.js";

var levels = /* :: */[
  /* tuple */[
    1,
    /* tuple */[
      "---- ---- ---- ---- n ---- ---- ---- ---- n ---- ---- ---- ---- n ---- ---- ---- ---- n ---- ---- ---- ---- n ---- ---- ---- ---- n ---- ---- ---- ---- n ---- ---- ---- ----",
      /* Count */Block.__(1, [20])
    ]
  ],
  /* :: */[
    /* tuple */[
      2,
      /* tuple */[
        "---- ---- ---- ---- n bbbb bbbb bbb- bbbb n ---- ---- -lr- ---- n ---- ---- ---- ---- n ---- ---- ---- ---- n bbbb b--b bbbb bbbb n ---- ---- ---- ---- n ---- ---- ---- ----",
        /* Count */Block.__(1, [20])
      ]
    ],
    /* :: */[
      /* tuple */[
        3,
        /* tuple */[
          "bbbb bbbb ---- bbbb n bbbb bbbb bbb- bbbb n ---- ---- -lr- ---- n ---- ---- ---- ---- n ---- ---- ---- ---- n bbbb b--b bbbb bbbb n ---- ---- ---- ---- n bbbb bbbb ---- bbbb",
          /* Count */Block.__(1, [20])
        ]
      ],
      /* [] */0
    ]
  ]
];

function load_level(i) {
  var match = List.assoc(i, levels);
  var grid = Utils.MyList[/* reducei */5]((function (acc, i, c) {
          var pos_000 = Caml_int32.mod_(i, Caml_int32.div(Constants.constantsState[/* windowWidth */1], Constants.constantsState[/* tileSize */4]));
          var pos_001 = Caml_int32.div(i, Caml_int32.div(Constants.constantsState[/* windowWidth */1], Constants.constantsState[/* tileSize */4]));
          var pos = /* tuple */[
            pos_000,
            pos_001
          ];
          if (c >= 99) {
            if (c !== 108) {
              if (c !== 114) {
                return acc;
              } else {
                return /* :: */[
                        /* tuple */[
                          pos,
                          /* RightWall */3
                        ],
                        acc
                      ];
              }
            } else {
              return /* :: */[
                      /* tuple */[
                        pos,
                        /* LeftWall */2
                      ],
                      acc
                    ];
            }
          } else if (c !== 45) {
            if (c >= 98) {
              return /* :: */[
                      /* tuple */[
                        pos,
                        /* Block */1
                      ],
                      acc
                    ];
            } else {
              return acc;
            }
          } else {
            return /* :: */[
                    /* tuple */[
                      pos,
                      /* Empty */0
                    ],
                    acc
                  ];
          }
        }), List.filter((function (c) {
                if (c !== /* "n" */110) {
                  return c !== /* " " */32;
                } else {
                  return false;
                }
              }))(Utils.MyString[/* explode */1]($$String.trim(match[0]))));
  return /* record */[
          /* grid */grid,
          /* winCondition */match[1]
        ];
}

var Levels = /* module */[
  /* levels */levels,
  /* load_level */load_level
];

export {
  Levels ,
  
}
/* No side effect */
