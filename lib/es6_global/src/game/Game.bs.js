// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as Draw from "./Draw.bs.js";
import * as Actor from "./Actor.bs.js";
import * as Block from "./../../../../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "./../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Utils from "./Utils.bs.js";
import * as React from "react";
import * as Levels from "./Levels.bs.js";
import * as Director from "./Director.bs.js";
import * as Constants from "./Constants.bs.js";
import * as ReasonReact from "./../../../../node_modules/reason-react/lib/es6_global/src/ReasonReact.js";

var component = ReasonReact.statelessComponent("Game");

var currentState = /* record */[
  /* direction : Right */1,
  /* reset */false,
  /* isRunning */true,
  /* level */Levels.Levels[/* load_level */1](1)
];

var initialGame_002 = /* snake */Actor.Snake[/* init */0](100, /* Right */1, Constants.constantsState[/* memberLength */2]);

var initialGame_003 = /* spawn : Normal */Block.__(0, [/* record */[
      /* pos : tuple */[
        100,
        100
      ],
      /* symbol */"*"
    ]]);

var initialGame = /* record */[
  /* state : Going */0,
  /* eaten : [] */0,
  initialGame_002,
  initialGame_003
];

function getTimeStamp() {
  return performance.now();
}

function gameLoop(t, currentGame) {
  var newGame = Director.updateGame(t, currentGame, currentState, Constants.constantsState);
  var canvas = Draw.load_canvas("canvas");
  Draw.draw_game(canvas, newGame, currentState, Constants.constantsState);
  requestAnimationFrame((function (t) {
          var match = currentState[/* reset */1];
          if (match) {
            currentState[/* reset */1] = false;
            return gameLoop(performance.now(), initialGame);
          } else {
            var match$1 = newGame[/* state */0];
            if (match$1 !== 0) {
              currentState[/* isRunning */2] = false;
              return /* () */0;
            } else {
              return gameLoop(t, newGame);
            }
          }
        }));
  return /* () */0;
}

document.addEventListener("keydown", (function (evt) {
        var match = Director.handleKey(evt.keyCode, currentState[/* direction */0]);
        currentState[/* direction */0] = match !== undefined ? match : currentState[/* direction */0];
        return true;
      }), true);

gameLoop(performance.now(), initialGame);

function resetGame(_, _$1) {
  var match = currentState[/* isRunning */2];
  if (match) {
    currentState[/* reset */1] = true;
    return /* () */0;
  } else {
    currentState[/* direction */0] = /* Right */1;
    currentState[/* reset */1] = false;
    currentState[/* isRunning */2] = true;
    return gameLoop(performance.now(), initialGame);
  }
}

function changeLevel(lvl, _, _$1) {
  var match = currentState[/* isRunning */2];
  if (match) {
    currentState[/* level */3] = Levels.Levels[/* load_level */1](lvl);
    currentState[/* reset */1] = true;
    return /* () */0;
  } else {
    currentState[/* level */3] = Levels.Levels[/* load_level */1](lvl);
    currentState[/* direction */0] = /* Right */1;
    currentState[/* reset */1] = false;
    currentState[/* isRunning */2] = true;
    return gameLoop(performance.now(), initialGame);
  }
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", undefined, React.createElement("button", {
                              onClick: Curry._1(self[/* handle */0], resetGame)
                            }, "Reset Game"), React.createElement("button", {
                              onClick: Curry._1(self[/* handle */0], (function (param, param$1) {
                                      return changeLevel(1, param, param$1);
                                    }))
                            }, "1"), React.createElement("button", {
                              onClick: Curry._1(self[/* handle */0], (function (param, param$1) {
                                      return changeLevel(2, param, param$1);
                                    }))
                            }, "2"), React.createElement("button", {
                              onClick: Curry._1(self[/* handle */0], (function (param, param$1) {
                                      return changeLevel(3, param, param$1);
                                    }))
                            }, "3"));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var Utils$1 = Utils.Utils;

var MyString = Utils.MyString;

var MyList = Utils.MyList;

export {
  component ,
  Utils$1 as Utils,
  MyString ,
  MyList ,
  currentState ,
  initialGame ,
  getTimeStamp ,
  gameLoop ,
  resetGame ,
  changeLevel ,
  make ,
  
}
/* component Not a pure module */
