// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as List from "./../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Actor from "./Actor.bs.js";
import * as Score from "./Score.bs.js";
import * as Utils from "./Utils.bs.js";
import * as BugSvg from "./bug.svg";
import * as Caml_int32 from "./../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as Pervasives from "./../../../../node_modules/bs-platform/lib/es6/pervasives.js";

function load_canvas(canvas_id) {
  var match = document.getElementById(canvas_id);
  if (match !== null) {
    return match;
  } else {
    console.log("cant find canvas " + (canvas_id + " \n"));
    return Pervasives.failwith("fail");
  }
}

function clear_canvas(canvas) {
  var context = canvas.getContext("2d");
  var cwidth = canvas.width;
  var cheight = canvas.height;
  context.clearRect(0, 0, cwidth, cheight);
  return /* () */0;
}

function draw_actor(canvas, snake, memberLength, memberWidth) {
  var context = canvas.getContext("2d");
  return Utils.MyList[/* forEachi */2]((function (param, i) {
                var match = param[0];
                var y = match[1];
                var x = match[0];
                var match$1;
                switch (param[1]) {
                  case 0 : 
                      match$1 = /* tuple */[
                        x,
                        y + memberLength | 0
                      ];
                      break;
                  case 1 : 
                      match$1 = /* tuple */[
                        x - memberLength | 0,
                        y
                      ];
                      break;
                  case 2 : 
                      match$1 = /* tuple */[
                        x,
                        y - memberLength | 0
                      ];
                      break;
                  case 3 : 
                      match$1 = /* tuple */[
                        x + memberLength | 0,
                        y
                      ];
                      break;
                  
                }
                var match$2 = i % 3;
                var color;
                if (match$2 > 2 || match$2 < 0) {
                  color = "#ffff00";
                } else {
                  switch (match$2) {
                    case 0 : 
                        color = "#ff0066";
                        break;
                    case 1 : 
                        color = "#0066ff";
                        break;
                    case 2 : 
                        color = "#00cc00";
                        break;
                    
                  }
                }
                var lineWidth = param[2] ? memberWidth + 3 | 0 : memberWidth;
                context.beginPath();
                context.strokeStyle = color;
                context.lineWidth = lineWidth;
                context.moveTo(match$1[0], match$1[1]);
                context.lineTo(x, y);
                context.stroke();
                return context.closePath();
              }), Actor.Snake[/* getData */7](snake));
}

function draw_prey(canvas, prey) {
  if (typeof prey === "number") {
    return /* () */0;
  } else {
    var match = prey[0][/* pos */0];
    var context = canvas.getContext("2d");
    if (typeof prey !== "number") {
      !prey.tag;
    }
    context.beginPath();
    var img = new Image(15, 15);
    img.src = BugSvg.default;
    context.drawImage(img, match[0] - 7 | 0, match[1] - 7 | 0);
    return context.closePath();
  }
}

function draw_debug(canvas, game) {
  var eaten = game[/* eaten */1];
  var context = canvas.getContext("2d");
  context.beginPath();
  context.strokeStyle = "#ff0066";
  context.lineWidth = 3;
  context.rect(1300, 0, 150, 100);
  context.stroke();
  context.closePath();
  var bodLength = Actor.Snake[/* length */4](game[/* snake */2]);
  var actorStr = "Body Length: " + String(bodLength);
  context.fillText(actorStr, 1310, 10);
  var eatenNr = Utils.MyString[/* append */0]("Eaten: ", String(List.length(eaten)));
  var scoreStr = "Score: " + String(Score.Score[/* sum_score */1](eaten));
  context.fillText(scoreStr + ("(" + (eatenNr + ")")), 1310, 20);
  var tmp;
  switch (game[/* state */0]) {
    case 0 : 
        tmp = "Going";
        break;
    case 1 : 
        tmp = "Won";
        break;
    case 2 : 
        tmp = "Lost";
        break;
    
  }
  var stateStr = "State: " + tmp;
  context.fillText(stateStr, 1310, 30);
  return /* () */0;
}

function draw_boundary(canvas, constants) {
  var context = canvas.getContext("2d");
  context.beginPath();
  context.strokeStyle = "#000000";
  context.lineWidth = 3;
  context.rect(0, 0, constants[/* windowWidth */1], constants[/* windowHeight */0]);
  context.stroke();
  return context.closePath();
}

function draw_grid(canvas, grid, param) {
  var tileSize = param[/* tileSize */4];
  var context = canvas.getContext("2d");
  return Utils.MyList[/* forEach */1]((function (param) {
                var match = param[0];
                var y = match[1];
                var x = match[0];
                context.beginPath();
                switch (param[1]) {
                  case 0 : 
                      context.strokeStyle = "#D3D3D3";
                      context.lineWidth = 1;
                      context.rect(Caml_int32.imul(x, tileSize), Caml_int32.imul(y, tileSize), tileSize, tileSize);
                      break;
                  case 1 : 
                      context.strokeStyle = "#000000";
                      context.fillRect(Caml_int32.imul(x, tileSize), Caml_int32.imul(y, tileSize), tileSize, tileSize);
                      break;
                  case 2 : 
                      context.strokeStyle = "#000000";
                      context.fillRect(Caml_int32.imul(x, tileSize), Caml_int32.imul(y, tileSize), tileSize / 2 | 0, tileSize);
                      break;
                  case 3 : 
                      context.strokeStyle = "#000000";
                      context.fillRect(Caml_int32.imul(x, tileSize) + (tileSize / 2 | 0) | 0, Caml_int32.imul(y, tileSize), tileSize / 2 | 0, tileSize);
                      break;
                  
                }
                context.fillText(String(x) + (" / " + String(y)), Caml_int32.imul(x, tileSize), Caml_int32.imul(y, tileSize) + (tileSize / 2 | 0) | 0);
                context.stroke();
                return context.closePath();
              }), grid);
}

function draw_game(canvas, game, currentState, constants) {
  var match = currentState[/* level */3];
  clear_canvas(canvas);
  draw_actor(canvas, game[/* snake */2], constants[/* memberLength */2], constants[/* memberWidth */3]);
  draw_prey(canvas, game[/* spawn */3]);
  draw_debug(canvas, game);
  draw_boundary(canvas, constants);
  draw_grid(canvas, match[/* grid */0], constants);
  return /* () */0;
}

export {
  load_canvas ,
  clear_canvas ,
  draw_actor ,
  draw_prey ,
  draw_debug ,
  draw_boundary ,
  draw_grid ,
  draw_game ,
  
}
/* ./bug.svg Not a pure module */
