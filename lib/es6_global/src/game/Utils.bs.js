// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as List from "./../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Curry from "./../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as $$String from "./../../../../node_modules/bs-platform/lib/es6/string.js";
import * as Caml_int32 from "./../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as Caml_string from "./../../../../node_modules/bs-platform/lib/es6/caml_string.js";
import * as Js_primitive from "./../../../../node_modules/bs-platform/lib/es6/js_primitive.js";

function add(a, b) {
  return a + b | 0;
}

function inc(i) {
  return i + 1 | 0;
}

function dec(i) {
  return i - 1 | 0;
}

var div = Caml_int32.div;

function $$double(i) {
  return (i << 1);
}

function incDouble(i) {
  return ((i + 1 | 0) << 1);
}

function sub(a, b) {
  return a - b | 0;
}

function sum(a, b) {
  return a + b | 0;
}

var Utils = /* module */[
  /* add */add,
  /* inc */inc,
  /* dec */dec,
  /* div */div,
  /* double */$$double,
  /* incDouble */incDouble,
  /* sub */sub,
  /* sum */sum
];

function append(s, s$prime) {
  return s + s$prime;
}

function explode(s) {
  var inner = function (_acc, _s$prime) {
    while(true) {
      var s$prime = _s$prime;
      var acc = _acc;
      var n = s$prime.length;
      if (n !== 0) {
        var c = Caml_string.get(s$prime, 0);
        var ss = $$String.sub(s$prime, 1, n - 1 | 0);
        _s$prime = ss;
        _acc = /* :: */[
          c,
          acc
        ];
        continue ;
      } else {
        return acc;
      }
    };
  };
  return List.rev(inner(/* [] */0, s));
}

var MyString = /* module */[
  /* append */append,
  /* explode */explode
];

function map(f, param) {
  if (param) {
    return /* :: */[
            Curry._1(f, param[0]),
            map(f, param[1])
          ];
  } else {
    return /* [] */0;
  }
}

function forEach(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      Curry._1(f, param[0]);
      _param = param[1];
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function forEachi(f, l) {
  var _i = 0;
  var _param = l;
  while(true) {
    var param = _param;
    var i = _i;
    if (param) {
      Curry._2(f, param[0], i);
      _param = param[1];
      _i = i + 1 | 0;
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function range(n) {
  var _acc = /* [] */0;
  var _i = 0;
  while(true) {
    var i = _i;
    var acc = _acc;
    var match = i < n;
    if (match) {
      _i = i + 1 | 0;
      _acc = /* :: */[
        i,
        acc
      ];
      continue ;
    } else {
      return acc;
    }
  };
}

function find_opt(pred, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var x = param[0];
      if (Curry._1(pred, x)) {
        return Js_primitive.some(x);
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return undefined;
    }
  };
}

function reducei(f, arr) {
  var _acc = /* [] */0;
  var _i = 0;
  var _param = arr;
  while(true) {
    var param = _param;
    var i = _i;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _i = i + 1 | 0;
      _acc = Curry._3(f, acc, i, param[0]);
      continue ;
    } else {
      return acc;
    }
  };
}

var MyList = /* module */[
  /* map */map,
  /* forEach */forEach,
  /* forEachi */forEachi,
  /* range */range,
  /* find_opt */find_opt,
  /* reducei */reducei
];

export {
  Utils ,
  MyString ,
  MyList ,
  
}
/* No side effect */
