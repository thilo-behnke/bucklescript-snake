// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as List from "./../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Utils from "./Utils.bs.js";
import * as Caml_obj from "./../../../../node_modules/bs-platform/lib/es6/caml_obj.js";
import * as Caml_int32 from "./../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as Pervasives from "./../../../../node_modules/bs-platform/lib/es6/pervasives.js";
import * as Caml_builtin_exceptions from "./../../../../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";

function init(n, d, ml) {
  return List.map((function (i) {
                return /* tuple */[
                        /* tuple */[
                          100 + Caml_int32.imul(i, ml) | 0,
                          100
                        ],
                        d,
                        false
                      ];
              }), Utils.MyList[/* range */3](n));
}

function head(b) {
  var match = List.hd(b);
  var match$1 = match[0];
  return /* tuple */[
          match$1[0],
          match$1[1]
        ];
}

function move(b, d, ml, param) {
  var calcNextPos = function (n, param, param$1, param$2) {
    var y = param$1[1];
    var x = param$1[0];
    var max_y = param[1];
    var max_x = param[0];
    switch (param$2) {
      case 0 : 
          var new_y = y > 5 ? y - n | 0 : max_y;
          return /* tuple */[
                  x,
                  new_y
                ];
      case 1 : 
          var new_x = x < (max_x - 5 | 0) ? x + n | 0 : 0;
          return /* tuple */[
                  new_x,
                  y
                ];
      case 2 : 
          var new_y$1 = y < (max_y - 5 | 0) ? y + n | 0 : 0;
          return /* tuple */[
                  x,
                  new_y$1
                ];
      case 3 : 
          var new_x$1 = x > 5 ? x - n | 0 : max_x;
          return /* tuple */[
                  new_x$1,
                  y
                ];
      
    }
  };
  var match = List.hd(b);
  var match$1 = match[0];
  var h$prime_000 = calcNextPos(ml, /* tuple */[
        param[0],
        param[1]
      ], /* tuple */[
        match$1[0],
        match$1[1]
      ], d);
  var h$prime = /* tuple */[
    h$prime_000,
    d,
    false
  ];
  var inner = function (m, l) {
    if (l) {
      return /* :: */[
              m,
              inner(l[0], l[1])
            ];
    } else if (m[2]) {
      return /* :: */[
              /* tuple */[
                m[0],
                m[1],
                false
              ],
              /* [] */0
            ];
    } else {
      return /* [] */0;
    }
  };
  return inner(h$prime, b);
}

function eat(b) {
  if (b) {
    var h = b[0];
    return /* :: */[
            /* tuple */[
              h[0],
              h[1],
              true
            ],
            b[1]
          ];
  } else {
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "Actor.ml",
            49,
            20
          ]
        ];
  }
}

var length = List.length;

function checkCollision(b, param, mw) {
  var objY = param[1];
  var objX = param[0];
  var match = List.hd(b);
  var d = match[1];
  var match$1 = match[0];
  var y = match$1[1];
  var x = match$1[0];
  var exit = 0;
  if (d !== 1 && d < 3) {
    if (Pervasives.abs(x - objX | 0) <= mw) {
      return Pervasives.abs(y - objY | 0) < mw;
    } else {
      return false;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (Pervasives.abs(x - objX | 0) < mw) {
      return Pervasives.abs(y - objY | 0) <= mw;
    } else {
      return false;
    }
  }
  
}

function checkSelfCollision(b) {
  if (b) {
    var match = b[0][0];
    var y = match[1];
    var x = match[0];
    return Utils.MyList[/* find_opt */4]((function (param) {
                  var match = param[0];
                  if (Caml_obj.caml_equal(x, match[0])) {
                    return Caml_obj.caml_equal(y, match[1]);
                  } else {
                    return false;
                  }
                }), b[1]) !== undefined;
  } else {
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "Actor.ml",
            57,
            10
          ]
        ];
  }
}

function getData(b) {
  return b;
}

var Snake = /* module */[
  /* init */init,
  /* head */head,
  /* move */move,
  /* eat */eat,
  /* length */length,
  /* checkCollision */checkCollision,
  /* checkSelfCollision */checkSelfCollision,
  /* getData */getData
];

export {
  Snake ,
  
}
/* No side effect */
